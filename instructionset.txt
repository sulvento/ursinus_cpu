=================F1 DESCRIPTION + INSTRUCTION SET ARCHITECTURE=================

WORK IN PROGRESS!!!!!!!

TODO: Add operands for the instruction set. Add memory layout. 

NOTES
---

The F1 CPU contains 256 bytes (2,048 bits, or 64 words) of memory. It contains 15 registers 
and can execute 35 different instructions. Each instruction takes up 20 bits of memory.

INSTRUCTIONS
---

#: NAME     // BINARY # // HEX ADDR // OPERANDS //
    DESCRIPTION

0: TRAP     // 00 // 0x000 // 
    sets ALU to TRAP mode 

1: NOP      // 10101 // 0x015 //
    no operation 

2: JMP      // 101001 // 0x029 // reg // 
    jumps to location in GP reg 

3: JMPZ     // 111110 // 0x03E // reg // 
    jumps to location in GP reg if Z is true 

4: JMPS     // 1010011 // 0x053 // reg // 
    jumps to location in GP reg if N is true 

5: JMPZS    // 1101000 // 0x068 // reg // 
    jumps to location in GP reg if Z, N both true 

6: LSTAT    // 1111101 // 0x07D // SX, reg // 
    loads SX reg into GP reg 

7: XSTAT    // 10010010 // 0x092 // SX, reg // 
    XOR SX with contents of reg 

8: NOT      // 10100111 // 0x0A7 // reg, s // 
    NOT reg contents, store result in reg s 

9: AND      // 10111100 // 0x0BC // reg, reg, s // 
    AND contents of 2 regs, store in reg s 

10: OR      // 11010001 // 0x0D1 // reg, reg, s // 
    OR contents of 2 regs, store in reg s 

11: XOR     // 11100110 // 0x0E6 // reg, reg, s // 
    XOR contents of 2 regs, store in reg s

12: SHFTR   // 11111011 // 0x0FB // reg, imm20/reg, s // 
    right shift reg contents, store in reg s

13: SHFTL   // 100010000 // 0x110 // reg, imm20/reg, s // 
    left shift reg contents, store in reg s

14: ROTR    // 100100101 // 0x125 // reg, imm20/reg, s // 
    rotate right reg contents, store in reg s  

15: ROTL    // 100111010 // 0x13A // reg, imm20/reg, s // 
    rotate left reg contents, store in reg s 

16: SWAP    // 101001111 // 0x14F // reg, reg // 
    swap contents of 2 regs 

17: INC     // 101100100 // 0x164 // reg // 
    increase reg value by 1

18: DEC     // 101111001 // 0x179 // reg // 
    decrease reg value by 1 

19: ADD     // 110001110 // 0x18E // reg, imm20/reg, s // 
    adds w/o carry, store in reg s

20: ADDC    // 110100011 // 0x1A3 // reg, imm20/reg, s // 
    adds with carry, store in reg s 

21: SUB     // 110111000 // 0x1B8 // reg, imm20/reg, s // 
    subtracts w/o carry, store in reg s  

22: SUBC    // 111001101 // 0x1CD // reg, imm20/reg, s // 
    subtracts with carry, store in reg s

23: EQ      // 111100010 // 0x1E2 // reg, reg // 
    compares equality of 2 regs 

24: GT      // 111110111 // 0x1F7 // reg, reg // 
    checks if reg A > reg B

25: LT      // 1000001100 // 0x20C // reg, reg // 
    checks if reg A < reg B 

26: GET     // 1000100001 // 0x221 // reg, reg // 
    checks if reg A => reg B 

27: LET     // 1000110110 // 0x236 // reg, reg // 
    checks if reg A <= reg B

28: MRR     // 1001001011 // 0x24B // reg, reg // 
    move contents of one reg to another 

29: LDC     // 1001100000 // 0x260 // imm20, reg // 
    loads number into register 

30: LDD     // 1001110101 // 0x275 // reg, reg // 
    loads data from the address in one reg to another 

31: LDI     // 1010001010 // 0x28A // reg, reg // 
    loads data from a pointer within another reg 

32: STD     // 1010011111 // 0x29F // reg, reg // 
    stores data in one reg from the address in another 

33: STI     // 1010110100 // 0x2B4 // reg, reg // 
    stores data from a pointer within another reg 

34: MUL     // 1011001001 // 0x2C9 // reg, imm20/reg, s1, s2 // 
    multiplies 2 regs, stores lower 20 bits in s1, higher 20 bits in s2

35: DIV     // 1011011110 // 0x2DE // reg, imm20/reg, s1, s2 // 
    divides 2 regs, stores quotient in s1, remainder in s2


REGISTERS
---

AX (0): GP
BX (1): GP
CX (2): GP
DX (3): GP
EX (4): GP
FX (5): GP

IS (6): instruction segment
SS (7): static segment
DS (8): dynamic segment
IP (9): instruction pointer
SP (10): static pointer
DP (11): dynamic pointer

SX (12): status register 

    FLAGS (0 - 12):

    ZERO (Z)
    NEGATIVE (N)
    OVERFLOW (O)
    UNDERFLOW (U)
    CARRYFW (F)
    CARRYHWL (L)
    CARRYHWH (I)
    DIVZERO (D)
    HALFWORD (H)
    SAMEREG (S)
    MVIOL (V)
    MCORR (C)
    TRAP (T)

IC (13): instruction count 
MA (14): memory access count  
MC (15): memory correction count 

MEMORY 
---

0x000 - 0x2DF = ROM
    0x000   - 0x2DF   - reserved for instructions 
    0x001             - pointed to by IS (instruction segment) register 
    0x2E0   - 0x2F5   - reserved for SX (status register)  
    0x30A   - 0x31F   - reserved for IC (instruction count) register
    0x334   - 0x349   - reserved for MA (memory access count) register
    0x35E   - 0x373   - reserved for MC (memory correction count) register 
    0x388   - 0x39D   - reserved for IS (instruction segment) register
    0x3B2   - 0x3C7   - reserved for DS (dynamic segment) register

0x3DC - 0x800 = RAM  
    0x3DC           - pointed to by DS (dynamic segment) register 
    
    













